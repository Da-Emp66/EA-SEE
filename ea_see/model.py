import torch.nn as nn

class FaceRecognitionModel(nn.Module):
    def __init__(self):
        self.model = nn.Sequential([
            nn.ZeroPad2d(1),
            nn.Conv2d(64, 64, kernel_size=(3,3)),
            nn.ReLU(),
            nn.ZeroPad2d(1),
            nn.Conv2d(64, 64, kernel_size=(3,3)),
            nn.ReLU(),
            nn.MaxPool2d((2,2), stride=(2,2)),
            nn.ZeroPad2d(1),
            nn.Conv2d(128, 128, kernel_size=(3,3)),
            nn.ReLU(),
            nn.ZeroPad2d(1),
            nn.Conv2d(128, 128, kernel_size=(3,3)),
            nn.ReLU(),
            nn.MaxPool2d((2,2), stride=(2,2)),
            nn.ZeroPad2d(1),
            nn.Conv2d(256, 256, kernel_size=(3,3)),
            nn.ReLU(),
            nn.ZeroPad2d(1),
            nn.Conv2d(256, 256, kernel_size=(3,3)),
            nn.ReLU(),
            nn.ZeroPad2d(1),
            nn.Conv2d(256, 256, kernel_size=(3,3)),
            nn.ReLU(),
            nn.MaxPool2d((2,2), stride=(2,2)),
            nn.ZeroPad2d(1),
            nn.Conv2d(512, 512, kernel_size=(3,3)),
            nn.ReLU(),
            nn.ZeroPad2d(1),
            nn.Conv2d(512, 512, kernel_size=(3,3)),
            nn.ReLU(),
            nn.ZeroPad2d(1),
            nn.Conv2d(512, 512, kernel_size=(3,3)),
            nn.ReLU(),
            nn.MaxPool2d((2,2), stride=(2,2)),
            nn.ZeroPad2d(1),
            nn.Conv2d(512, 512, kernel_size=(3,3)),
            nn.ReLU(),
            nn.ZeroPad2d(1),
            nn.Conv2d(512, 512, kernel_size=(3,3)),
            nn.ReLU(),
            nn.ZeroPad2d(1),
            nn.Conv2d(512, 512, kernel_size=(3,3)),
            nn.ReLU(),
            nn.MaxPool2d((2,2), stride=(2,2)),
            nn.Conv2d(4096, 4096, kernel_size=(7,7)),
            nn.ReLU(),
            nn.Dropout(0.5),
            nn.Conv2d(4096, 4096, kernel_size=(1,1)),
            nn.ReLU(),
            nn.Dropout(0.5),
            nn.Conv2d(2622, 2622, kernel_size=(1,1)),
            nn.Flatten(),
            nn.Softmax(),
        ])

    def forward(self, x):
        return self.model(x)
